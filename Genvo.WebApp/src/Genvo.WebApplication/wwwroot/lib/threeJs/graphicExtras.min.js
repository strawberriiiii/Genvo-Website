THREE.CopyShader={uniforms:{tDiffuse:{value:null},opacity:{value:1}},vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform float opacity;\nuniform sampler2D tDiffuse;\nvarying vec2 vUv;\nvoid main() {\nvec4 texel = texture2D( tDiffuse, vUv );\ngl_FragColor = opacity * texel;\n}"};THREE.HorizontalBlurShader={uniforms:{tDiffuse:{value:null},h:{value:1/512}},vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D tDiffuse;\nuniform float h;\nvarying vec2 vUv;\nvoid main() {\nvec4 sum = vec4( 0.0 );\nsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * h, vUv.y ) ) * 0.051;\nsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * h, vUv.y ) ) * 0.0918;\nsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * h, vUv.y ) ) * 0.12245;\nsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * h, vUv.y ) ) * 0.1531;\nsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\nsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * h, vUv.y ) ) * 0.1531;\nsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * h, vUv.y ) ) * 0.12245;\nsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * h, vUv.y ) ) * 0.0918;\nsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * h, vUv.y ) ) * 0.051;\ngl_FragColor = sum;\n}"};THREE.VerticalBlurShader={uniforms:{tDiffuse:{value:null},v:{value:1/512}},vertexShader:"varying vec2 vUv;\nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D tDiffuse;\nuniform float v;\nvarying vec2 vUv;\nvoid main() {\nvec4 sum = vec4( 0.0 );\nsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * v ) ) * 0.051;\nsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * v ) ) * 0.0918;\nsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * v ) ) * 0.12245;\nsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * v ) ) * 0.1531;\nsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\nsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * v ) ) * 0.1531;\nsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * v ) ) * 0.12245;\nsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * v ) ) * 0.0918;\nsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * v ) ) * 0.051;\ngl_FragColor = sum;\n}"};THREE.ConvolutionShader={defines:{KERNEL_SIZE_FLOAT:"25.0",KERNEL_SIZE_INT:"25"},uniforms:{tDiffuse:{value:null},uImageIncrement:{value:new THREE.Vector2(.001953125,0)},cKernel:{value:[]}},vertexShader:"uniform vec2 uImageIncrement;\nvarying vec2 vUv;\nvoid main() {\nvUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform float cKernel[ KERNEL_SIZE_INT ];\nuniform sampler2D tDiffuse;\nuniform vec2 uImageIncrement;\nvarying vec2 vUv;\nvoid main() {\nvec2 imageCoord = vUv;\nvec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );\nfor( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {\nsum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];\nimageCoord += uImageIncrement;\n}\ngl_FragColor = sum;\n}",buildKernel:function(n){function o(n,t){return Math.exp(-(n*n)/(2*t*t))}var t,r,u,f,e=25,i=2*Math.ceil(n*3)+1;for(i>e&&(i=e),f=(i-1)*.5,r=new Array(i),u=0,t=0;t<i;++t)r[t]=o(t-f,n),u+=r[t];for(t=0;t<i;++t)r[t]/=u;return r}};THREE.EffectComposer=function(n,t){if(this.renderer=n,t===undefined){var r={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat,stencilBuffer:!1},i=n.getSize();t=new THREE.WebGLRenderTarget(i.width,i.height,r)}this.renderTarget1=t;this.renderTarget2=t.clone();this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2;this.passes=[];THREE.CopyShader===undefined&&console.error("THREE.EffectComposer relies on THREE.CopyShader");this.copyPass=new THREE.ShaderPass(THREE.CopyShader)};Object.assign(THREE.EffectComposer.prototype,{swapBuffers:function(){var n=this.readBuffer;this.readBuffer=this.writeBuffer;this.writeBuffer=n},addPass:function(n){this.passes.push(n);var t=this.renderer.getSize();n.setSize(t.width,t.height)},insertPass:function(n,t){this.passes.splice(t,0,n)},render:function(n){for(var r=!1,t,f=this.passes.length,i,u=0;u<f;u++)(t=this.passes[u],t.enabled!==!1)&&(t.render(this.renderer,this.writeBuffer,this.readBuffer,n,r),t.needsSwap&&(r&&(i=this.renderer.context,i.stencilFunc(i.NOTEQUAL,1,4294967295),this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,n),i.stencilFunc(i.EQUAL,1,4294967295)),this.swapBuffers()),THREE.MaskPass!==undefined&&(t instanceof THREE.MaskPass?r=!0:t instanceof THREE.ClearMaskPass&&(r=!1)))},reset:function(n){if(n===undefined){var t=this.renderer.getSize();n=this.renderTarget1.clone();n.setSize(t.width,t.height)}this.renderTarget1.dispose();this.renderTarget2.dispose();this.renderTarget1=n;this.renderTarget2=n.clone();this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2},setSize:function(n,t){this.renderTarget1.setSize(n,t);this.renderTarget2.setSize(n,t);for(var i=0;i<this.passes.length;i++)this.passes[i].setSize(n,t)}});THREE.Pass=function(){this.enabled=!0;this.needsSwap=!0;this.clear=!1;this.renderToScreen=!1};Object.assign(THREE.Pass.prototype,{setSize:function(){},render:function(){console.error("THREE.Pass: .render() must be implemented in derived pass.")}});THREE.RenderPass=function(n,t,i,r,u){THREE.Pass.call(this);this.scene=n;this.camera=t;this.overrideMaterial=i;this.clearColor=r;this.clearAlpha=u!==undefined?u:0;this.clear=!0;this.needsSwap=!1};THREE.RenderPass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:THREE.RenderPass,render:function(n,t,i){var f=n.autoClear,r,u;n.autoClear=!1;this.scene.overrideMaterial=this.overrideMaterial;this.clearColor&&(r=n.getClearColor().getHex(),u=n.getClearAlpha(),n.setClearColor(this.clearColor,this.clearAlpha));n.render(this.scene,this.camera,this.renderToScreen?null:i,this.clear);this.clearColor&&n.setClearColor(r,u);this.scene.overrideMaterial=null;n.autoClear=f}});THREE.BloomPass=function(n,t,i,r){var e,u,f;THREE.Pass.call(this);n=n!==undefined?n:1;t=t!==undefined?t:25;i=i!==undefined?i:4;r=r!==undefined?r:256;e={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat};this.renderTargetX=new THREE.WebGLRenderTarget(r,r,e);this.renderTargetY=new THREE.WebGLRenderTarget(r,r,e);THREE.CopyShader===undefined&&console.error("THREE.BloomPass relies on THREE.CopyShader");u=THREE.CopyShader;this.copyUniforms=Object.assign({},u.uniforms);this.copyUniforms.opacity.value=n;this.materialCopy=new THREE.ShaderMaterial({uniforms:this.copyUniforms,vertexShader:u.vertexShader,fragmentShader:u.fragmentShader,blending:THREE.AdditiveBlending,transparent:!0});THREE.ConvolutionShader===undefined&&console.error("THREE.BloomPass relies on THREE.ConvolutionShader");f=THREE.ConvolutionShader;this.convolutionUniforms=Object.assign({},f.uniforms);this.convolutionUniforms.uImageIncrement.value=THREE.BloomPass.blurX;this.convolutionUniforms.cKernel.value=THREE.ConvolutionShader.buildKernel(i);this.materialConvolution=new THREE.ShaderMaterial({uniforms:this.convolutionUniforms,vertexShader:f.vertexShader,fragmentShader:f.fragmentShader,defines:{KERNEL_SIZE_FLOAT:t.toFixed(1),KERNEL_SIZE_INT:t.toFixed(0)}});this.needsSwap=!1;this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1);this.scene=new THREE.Scene;this.quad=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null);this.scene.add(this.quad)};THREE.BloomPass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:THREE.BloomPass,render:function(n,t,i,r,u){u&&n.context.disable(n.context.STENCIL_TEST);this.quad.material=this.materialConvolution;this.convolutionUniforms.tDiffuse.value=i.texture;this.convolutionUniforms.uImageIncrement.value=THREE.BloomPass.blurX;n.render(this.scene,this.camera,this.renderTargetX,!0);this.convolutionUniforms.tDiffuse.value=this.renderTargetX.texture;this.convolutionUniforms.uImageIncrement.value=THREE.BloomPass.blurY;n.render(this.scene,this.camera,this.renderTargetY,!1);this.quad.material=this.materialCopy;this.copyUniforms.tDiffuse.value=this.renderTargetY.texture;u&&n.context.enable(n.context.STENCIL_TEST);n.render(this.scene,this.camera,i,this.clear)}});THREE.BloomPass.blurX=new THREE.Vector2(.001953125,0);THREE.BloomPass.blurY=new THREE.Vector2(0,.001953125);THREE.UnrealBloomPass=function(n,t,i,r){var s,u,f,o,h,e,l,c;for(THREE.Pass.call(this),this.strength=t!==undefined?t:1,this.radius=i,this.threshold=r,this.resolution=n!==undefined?new THREE.Vector2(n.x,n.y):new THREE.Vector2(256,256),s={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat},this.renderTargetsHorizontal=[],this.renderTargetsVertical=[],this.nMips=5,u=Math.round(this.resolution.x/2),f=Math.round(this.resolution.y/2),this.renderTargetBright=new THREE.WebGLRenderTarget(u,f,s),this.renderTargetBright.texture.generateMipmaps=!1,e=0;e<this.nMips;e++)o=new THREE.WebGLRenderTarget(u,f,s),o.texture.generateMipmaps=!1,this.renderTargetsHorizontal.push(o),o=new THREE.WebGLRenderTarget(u,f,s),o.texture.generateMipmaps=!1,this.renderTargetsVertical.push(o),u=Math.round(u/2),f=Math.round(f/2);THREE.LuminosityHighPassShader===undefined&&console.error("THREE.UnrealBloomPass relies on THREE.LuminosityHighPassShader");h=THREE.LuminosityHighPassShader;this.highPassUniforms=THREE.UniformsUtils.clone(h.uniforms);this.highPassUniforms.luminosityThreshold.value=r;this.highPassUniforms.smoothWidth.value=.01;this.materialHighPassFilter=new THREE.ShaderMaterial({uniforms:this.highPassUniforms,vertexShader:h.vertexShader,fragmentShader:h.fragmentShader,defines:{}});this.separableBlurMaterials=[];var a=[3,5,7,9,11],u=Math.round(this.resolution.x/2),f=Math.round(this.resolution.y/2);for(e=0;e<this.nMips;e++)this.separableBlurMaterials.push(this.getSeperableBlurMaterial(a[e])),this.separableBlurMaterials[e].uniforms.texSize.value=new THREE.Vector2(u,f),u=Math.round(u/2),f=Math.round(f/2);this.compositeMaterial=this.getCompositeMaterial(this.nMips);this.compositeMaterial.uniforms.blurTexture1.value=this.renderTargetsVertical[0].texture;this.compositeMaterial.uniforms.blurTexture2.value=this.renderTargetsVertical[1].texture;this.compositeMaterial.uniforms.blurTexture3.value=this.renderTargetsVertical[2].texture;this.compositeMaterial.uniforms.blurTexture4.value=this.renderTargetsVertical[3].texture;this.compositeMaterial.uniforms.blurTexture5.value=this.renderTargetsVertical[4].texture;this.compositeMaterial.uniforms.bloomStrength.value=t;this.compositeMaterial.uniforms.bloomRadius.value=.1;this.compositeMaterial.needsUpdate=!0;l=[1,.8,.6,.4,.2];this.compositeMaterial.uniforms.bloomFactors.value=l;this.bloomTintColors=[new THREE.Vector3(1,1,1),new THREE.Vector3(1,1,1),new THREE.Vector3(1,1,1),new THREE.Vector3(1,1,1),new THREE.Vector3(1,1,1)];this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors;THREE.CopyShader===undefined&&console.error("THREE.BloomPass relies on THREE.CopyShader");c=THREE.CopyShader;this.copyUniforms=THREE.UniformsUtils.clone(c.uniforms);this.copyUniforms.opacity.value=1;this.materialCopy=new THREE.ShaderMaterial({uniforms:this.copyUniforms,vertexShader:c.vertexShader,fragmentShader:c.fragmentShader,blending:THREE.AdditiveBlending,depthTest:!1,depthWrite:!1,transparent:!0});this.enabled=!0;this.needsSwap=!1;this.oldClearColor=new THREE.Color;this.oldClearAlpha=1;this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1);this.scene=new THREE.Scene;this.quad=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null);this.scene.add(this.quad)};THREE.UnrealBloomPass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:THREE.UnrealBloomPass,dispose:function(){for(var n=0;n<this.renderTargetsHorizontal.length();n++)this.renderTargetsHorizontal[n].dispose();for(n=0;n<this.renderTargetsVertical.length();n++)this.renderTargetsVertical[n].dispose();this.renderTargetBright.dispose()},setSize:function(n,t){var i=Math.round(n/2),r=Math.round(t/2),u;for(this.renderTargetBright.setSize(i,r),u=0;u<this.nMips;u++)this.renderTargetsHorizontal[u].setSize(i,r),this.renderTargetsVertical[u].setSize(i,r),this.separableBlurMaterials[u].uniforms.texSize.value=new THREE.Vector2(i,r),i=Math.round(i/2),r=Math.round(r/2)},render:function(n,t,i,r,u){var o,e,f;for(this.oldClearColor.copy(n.getClearColor()),this.oldClearAlpha=n.getClearAlpha(),o=n.autoClear,n.autoClear=!1,n.setClearColor(new THREE.Color(0,0,0),0),u&&n.context.disable(n.context.STENCIL_TEST),this.highPassUniforms.tDiffuse.value=i.texture,this.highPassUniforms.luminosityThreshold.value=this.threshold,this.quad.material=this.materialHighPassFilter,n.render(this.scene,this.camera,this.renderTargetBright,!0),e=this.renderTargetBright,f=0;f<this.nMips;f++)this.quad.material=this.separableBlurMaterials[f],this.separableBlurMaterials[f].uniforms.colorTexture.value=e.texture,this.separableBlurMaterials[f].uniforms.direction.value=THREE.UnrealBloomPass.BlurDirectionX,n.render(this.scene,this.camera,this.renderTargetsHorizontal[f],!0),this.separableBlurMaterials[f].uniforms.colorTexture.value=this.renderTargetsHorizontal[f].texture,this.separableBlurMaterials[f].uniforms.direction.value=THREE.UnrealBloomPass.BlurDirectionY,n.render(this.scene,this.camera,this.renderTargetsVertical[f],!0),e=this.renderTargetsVertical[f];this.quad.material=this.compositeMaterial;this.compositeMaterial.uniforms.bloomStrength.value=this.strength;this.compositeMaterial.uniforms.bloomRadius.value=this.radius;this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors;n.render(this.scene,this.camera,this.renderTargetsHorizontal[0],!0);this.quad.material=this.materialCopy;this.copyUniforms.tDiffuse.value=this.renderTargetsHorizontal[0].texture;u&&n.context.enable(n.context.STENCIL_TEST);n.render(this.scene,this.camera,i,!1);n.setClearColor(this.oldClearColor,this.oldClearAlpha);n.autoClear=o},getSeperableBlurMaterial:function(n){return new THREE.ShaderMaterial({defines:{KERNEL_RADIUS:n,SIGMA:n},uniforms:{colorTexture:{value:null},texSize:{value:new THREE.Vector2(.5,.5)},direction:{value:new THREE.Vector2(.5,.5)}},vertexShader:"varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",fragmentShader:"#include <common>\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\t\t\t\tuniform vec2 direction;\t\t\t\t\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\t\t\t\t}\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\t\t\t\t\tfloat fSigma = float(SIGMA);\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\t\t\t\t\t\tfloat x = float(i);\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\t\t\t\t\t\tweightSum += 2.0 * w;\t\t\t\t\t}\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t\t}"})},getCompositeMaterial:function(n){return new THREE.ShaderMaterial({defines:{NUM_MIPS:n},uniforms:{blurTexture1:{value:null},blurTexture2:{value:null},blurTexture3:{value:null},blurTexture4:{value:null},blurTexture5:{value:null},dirtTexture:{value:null},bloomStrength:{value:1},bloomFactors:{value:null},bloomTintColors:{value:null},bloomRadius:{value:0}},vertexShader:"varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",fragmentShader:"varying vec2 vUv;\t\t\t\tuniform sampler2D blurTexture1;\t\t\t\tuniform sampler2D blurTexture2;\t\t\t\tuniform sampler2D blurTexture3;\t\t\t\tuniform sampler2D blurTexture4;\t\t\t\tuniform sampler2D blurTexture5;\t\t\t\tuniform sampler2D dirtTexture;\t\t\t\tuniform float bloomStrength;\t\t\t\tuniform float bloomRadius;\t\t\t\tuniform float bloomFactors[NUM_MIPS];\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\t\t\t\t\t\t\t\tfloat lerpBloomFactor(const in float factor) { \t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\t\t\t\t}\t\t\t\t\t\t\t\tvoid main() {\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \t\t\t\t\t \t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\t\t\t\t}"})}});THREE.UnrealBloomPass.BlurDirectionX=new THREE.Vector2(1,0);THREE.UnrealBloomPass.BlurDirectionY=new THREE.Vector2(0,1);THREE.UnrealBloomPass=function(n,t,i,r){var s,u,f,o,h,e,l,c;for(THREE.Pass.call(this),this.strength=t!==undefined?t:1,this.radius=i,this.threshold=r,this.resolution=n!==undefined?new THREE.Vector2(n.x,n.y):new THREE.Vector2(256,256),s={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBAFormat},this.renderTargetsHorizontal=[],this.renderTargetsVertical=[],this.nMips=5,u=Math.round(this.resolution.x/2),f=Math.round(this.resolution.y/2),this.renderTargetBright=new THREE.WebGLRenderTarget(u,f,s),this.renderTargetBright.texture.generateMipmaps=!1,e=0;e<this.nMips;e++)o=new THREE.WebGLRenderTarget(u,f,s),o.texture.generateMipmaps=!1,this.renderTargetsHorizontal.push(o),o=new THREE.WebGLRenderTarget(u,f,s),o.texture.generateMipmaps=!1,this.renderTargetsVertical.push(o),u=Math.round(u/2),f=Math.round(f/2);THREE.LuminosityHighPassShader===undefined&&console.error("THREE.UnrealBloomPass relies on THREE.LuminosityHighPassShader");h=THREE.LuminosityHighPassShader;this.highPassUniforms=THREE.UniformsUtils.clone(h.uniforms);this.highPassUniforms.luminosityThreshold.value=r;this.highPassUniforms.smoothWidth.value=.01;this.materialHighPassFilter=new THREE.ShaderMaterial({uniforms:this.highPassUniforms,vertexShader:h.vertexShader,fragmentShader:h.fragmentShader,defines:{}});this.separableBlurMaterials=[];var a=[3,5,7,9,11],u=Math.round(this.resolution.x/2),f=Math.round(this.resolution.y/2);for(e=0;e<this.nMips;e++)this.separableBlurMaterials.push(this.getSeperableBlurMaterial(a[e])),this.separableBlurMaterials[e].uniforms.texSize.value=new THREE.Vector2(u,f),u=Math.round(u/2),f=Math.round(f/2);this.compositeMaterial=this.getCompositeMaterial(this.nMips);this.compositeMaterial.uniforms.blurTexture1.value=this.renderTargetsVertical[0].texture;this.compositeMaterial.uniforms.blurTexture2.value=this.renderTargetsVertical[1].texture;this.compositeMaterial.uniforms.blurTexture3.value=this.renderTargetsVertical[2].texture;this.compositeMaterial.uniforms.blurTexture4.value=this.renderTargetsVertical[3].texture;this.compositeMaterial.uniforms.blurTexture5.value=this.renderTargetsVertical[4].texture;this.compositeMaterial.uniforms.bloomStrength.value=t;this.compositeMaterial.uniforms.bloomRadius.value=.1;this.compositeMaterial.needsUpdate=!0;l=[1,.8,.6,.4,.2];this.compositeMaterial.uniforms.bloomFactors.value=l;this.bloomTintColors=[new THREE.Vector3(1,1,1),new THREE.Vector3(1,1,1),new THREE.Vector3(1,1,1),new THREE.Vector3(1,1,1),new THREE.Vector3(1,1,1)];this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors;THREE.CopyShader===undefined&&console.error("THREE.BloomPass relies on THREE.CopyShader");c=THREE.CopyShader;this.copyUniforms=THREE.UniformsUtils.clone(c.uniforms);this.copyUniforms.opacity.value=1;this.materialCopy=new THREE.ShaderMaterial({uniforms:this.copyUniforms,vertexShader:c.vertexShader,fragmentShader:c.fragmentShader,blending:THREE.AdditiveBlending,depthTest:!1,depthWrite:!1,transparent:!0});this.enabled=!0;this.needsSwap=!1;this.oldClearColor=new THREE.Color;this.oldClearAlpha=1;this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1);this.scene=new THREE.Scene;this.quad=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null);this.scene.add(this.quad)};THREE.UnrealBloomPass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:THREE.UnrealBloomPass,dispose:function(){for(var n=0;n<this.renderTargetsHorizontal.length();n++)this.renderTargetsHorizontal[n].dispose();for(n=0;n<this.renderTargetsVertical.length();n++)this.renderTargetsVertical[n].dispose();this.renderTargetBright.dispose()},setSize:function(n,t){var i=Math.round(n/2),r=Math.round(t/2),u;for(this.renderTargetBright.setSize(i,r),u=0;u<this.nMips;u++)this.renderTargetsHorizontal[u].setSize(i,r),this.renderTargetsVertical[u].setSize(i,r),this.separableBlurMaterials[u].uniforms.texSize.value=new THREE.Vector2(i,r),i=Math.round(i/2),r=Math.round(r/2)},render:function(n,t,i,r,u){var o,e,f;for(this.oldClearColor.copy(n.getClearColor()),this.oldClearAlpha=n.getClearAlpha(),o=n.autoClear,n.autoClear=!1,n.setClearColor(new THREE.Color(0,0,0),0),u&&n.context.disable(n.context.STENCIL_TEST),this.highPassUniforms.tDiffuse.value=i.texture,this.highPassUniforms.luminosityThreshold.value=this.threshold,this.quad.material=this.materialHighPassFilter,n.render(this.scene,this.camera,this.renderTargetBright,!0),e=this.renderTargetBright,f=0;f<this.nMips;f++)this.quad.material=this.separableBlurMaterials[f],this.separableBlurMaterials[f].uniforms.colorTexture.value=e.texture,this.separableBlurMaterials[f].uniforms.direction.value=THREE.UnrealBloomPass.BlurDirectionX,n.render(this.scene,this.camera,this.renderTargetsHorizontal[f],!0),this.separableBlurMaterials[f].uniforms.colorTexture.value=this.renderTargetsHorizontal[f].texture,this.separableBlurMaterials[f].uniforms.direction.value=THREE.UnrealBloomPass.BlurDirectionY,n.render(this.scene,this.camera,this.renderTargetsVertical[f],!0),e=this.renderTargetsVertical[f];this.quad.material=this.compositeMaterial;this.compositeMaterial.uniforms.bloomStrength.value=this.strength;this.compositeMaterial.uniforms.bloomRadius.value=this.radius;this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors;n.render(this.scene,this.camera,this.renderTargetsHorizontal[0],!0);this.quad.material=this.materialCopy;this.copyUniforms.tDiffuse.value=this.renderTargetsHorizontal[0].texture;u&&n.context.enable(n.context.STENCIL_TEST);n.render(this.scene,this.camera,i,!1);n.setClearColor(this.oldClearColor,this.oldClearAlpha);n.autoClear=o},getSeperableBlurMaterial:function(n){return new THREE.ShaderMaterial({defines:{KERNEL_RADIUS:n,SIGMA:n},uniforms:{colorTexture:{value:null},texSize:{value:new THREE.Vector2(.5,.5)},direction:{value:new THREE.Vector2(.5,.5)}},vertexShader:"varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",fragmentShader:"#include <common>\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\t\t\t\tuniform vec2 direction;\t\t\t\t\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\t\t\t\t}\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\t\t\t\t\tfloat fSigma = float(SIGMA);\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\t\t\t\t\t\tfloat x = float(i);\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\t\t\t\t\t\tweightSum += 2.0 * w;\t\t\t\t\t}\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n\t\t\t\t}"})},getCompositeMaterial:function(n){return new THREE.ShaderMaterial({defines:{NUM_MIPS:n},uniforms:{blurTexture1:{value:null},blurTexture2:{value:null},blurTexture3:{value:null},blurTexture4:{value:null},blurTexture5:{value:null},dirtTexture:{value:null},bloomStrength:{value:1},bloomFactors:{value:null},bloomTintColors:{value:null},bloomRadius:{value:0}},vertexShader:"varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",fragmentShader:"varying vec2 vUv;\t\t\t\tuniform sampler2D blurTexture1;\t\t\t\tuniform sampler2D blurTexture2;\t\t\t\tuniform sampler2D blurTexture3;\t\t\t\tuniform sampler2D blurTexture4;\t\t\t\tuniform sampler2D blurTexture5;\t\t\t\tuniform sampler2D dirtTexture;\t\t\t\tuniform float bloomStrength;\t\t\t\tuniform float bloomRadius;\t\t\t\tuniform float bloomFactors[NUM_MIPS];\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\t\t\t\t\t\t\t\tfloat lerpBloomFactor(const in float factor) { \t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\t\t\t\t}\t\t\t\t\t\t\t\tvoid main() {\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \t\t\t\t\t \t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\t\t\t\t}"})}});THREE.UnrealBloomPass.BlurDirectionX=new THREE.Vector2(1,0);THREE.UnrealBloomPass.BlurDirectionY=new THREE.Vector2(0,1);THREE.ClearPass=function(n,t){THREE.Pass.call(this);this.needsSwap=!1;this.clearColor=n!==undefined?n:0;this.clearAlpha=t!==undefined?t:0};THREE.ClearPass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:THREE.ClearPass,render:function(n,t,i){var r,u;this.clearColor&&(r=n.getClearColor().getHex(),u=n.getClearAlpha(),n.setClearColor(this.clearColor,this.clearAlpha));n.setRenderTarget(this.renderToScreen?null:i);n.clear();this.clearColor&&n.setClearColor(r,u)}});THREE.ShaderPass=function(n,t){THREE.Pass.call(this);this.textureID=t!==undefined?t:"tDiffuse";n instanceof THREE.ShaderMaterial?(this.uniforms=n.uniforms,this.material=n):n&&(this.uniforms=THREE.UniformsUtils.clone(n.uniforms),this.material=new THREE.ShaderMaterial({defines:n.defines||{},uniforms:this.uniforms,vertexShader:n.vertexShader,fragmentShader:n.fragmentShader}));this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1);this.scene=new THREE.Scene;this.quad=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null);this.scene.add(this.quad)};THREE.ShaderPass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:THREE.ShaderPass,render:function(n,t,i){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=i.texture);this.quad.material=this.material;this.renderToScreen?n.render(this.scene,this.camera):n.render(this.scene,this.camera,t,this.clear)}});THREE.MaskPass=function(n,t){THREE.Pass.call(this);this.scene=n;this.camera=t;this.clear=!0;this.needsSwap=!1;this.inverse=!1};THREE.MaskPass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:THREE.MaskPass,render:function(n,t,i){var u=n.context,r=n.state,f,e;r.buffers.color.setMask(!1);r.buffers.depth.setMask(!1);r.buffers.color.setLocked(!0);r.buffers.depth.setLocked(!0);this.inverse?(f=0,e=1):(f=1,e=0);r.buffers.stencil.setTest(!0);r.buffers.stencil.setOp(u.REPLACE,u.REPLACE,u.REPLACE);r.buffers.stencil.setFunc(u.ALWAYS,f,4294967295);r.buffers.stencil.setClear(e);n.render(this.scene,this.camera,i,this.clear);n.render(this.scene,this.camera,t,this.clear);r.buffers.color.setLocked(!1);r.buffers.depth.setLocked(!1);r.buffers.stencil.setFunc(u.EQUAL,1,4294967295);r.buffers.stencil.setOp(u.KEEP,u.KEEP,u.KEEP)}});THREE.ClearMaskPass=function(){THREE.Pass.call(this);this.needsSwap=!1};THREE.ClearMaskPass.prototype=Object.create(THREE.Pass.prototype);Object.assign(THREE.ClearMaskPass.prototype,{render:function(n){n.state.buffers.stencil.setTest(!1)}});THREE.SavePass=function(n){THREE.Pass.call(this);THREE.CopyShader===undefined&&console.error("THREE.SavePass relies on THREE.CopyShader");var t=THREE.CopyShader;this.textureID="tDiffuse";this.uniforms=Object.assign({},t.uniforms);this.material=new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:t.vertexShader,fragmentShader:t.fragmentShader});this.renderTarget=n;this.renderTarget===undefined&&(this.renderTargetParameters={minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat,stencilBuffer:!1},this.renderTarget=new THREE.WebGLRenderTarget(window.innerWidth,window.innerHeight,this.renderTargetParameters));this.needsSwap=!1;this.camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1);this.scene=new THREE.Scene;this.quad=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),null);this.scene.add(this.quad)};THREE.SavePass.prototype=Object.assign(Object.create(THREE.Pass.prototype),{constructor:THREE.SavePass,render:function(n,t,i){this.uniforms[this.textureID]&&(this.uniforms[this.textureID].value=i.texture);this.quad.material=this.material;n.render(this.scene,this.camera,this.renderTarget,this.clear)}});